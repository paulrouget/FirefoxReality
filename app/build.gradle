apply plugin: 'com.android.application'
apply from: "$project.rootDir/tools/gradle/versionCode.gradle"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    project.archivesBaseName = "FirefoxReality"
    compileSdkVersion 27
    defaultConfig {
        applicationId "org.mozilla.vrbrowser"
        minSdkVersion 24
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi-v7a"
        }
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -fexceptions -frtti -Werror" +
                         " -I" + file("src/main/cpp").absolutePath +
                         " -I" + file("src/main/cpp/vrb/include").absolutePath
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    packagingOptions {
        pickFirst '/lib/*/libgvr.so'
    }

    productFlavors {
        googlevr {
            //ndk {
            //    abiFilters "arm64-v8a"
            //}
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/gvr-android-sdk/libraries/headers").absolutePath +
                            " -DVRBROWSER_GOOGLEVR"
                    arguments "-DVR_SDK_LIB=googlevr-lib", "-DGOOGLEVR=ON"
                }
            }
        }

        googlevrFlat {
            //ndk {
            //    abiFilters "arm64-v8a"
            //}
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/gvr-android-sdk/libraries/headers").absolutePath +
                            " -DVRBROWSER_GOOGLEVR"
                    arguments "-DVR_SDK_LIB=googlevr-lib", "-DGOOGLEVR=ON"
                }
            }
        }

        oculusvr {
            //ndk {
            //    abiFilters "arm64-v8a"
            //}
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/ovr_mobile/VrApi/Include").absolutePath +
                            " -I" + file("${project.rootDir}/app/src/oculusvr/cpp").absolutePath +
                            " -DOCULUSVR"
                    arguments "-DVR_SDK_LIB=oculusvr-lib", "-DOCULUSVR=ON"
                }
            }
        }
        svr {
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/svr/public").absolutePath +
                            " -I" + file("${project.rootDir}/app/src/svr/cpp").absolutePath +
                            " -DSNAPDRAGONVR"
                    arguments "-DVR_SDK_LIB=svr-lib", "-DSNAPDRAGONVR=ON"
                }
            }
        }
        wavevr {
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/wavesdk/build/wvr_client/include").absolutePath
                    arguments "-DVR_SDK_LIB=wavevr-lib", "-DWAVEVR=ON"
                }
            }
        }
        noapi {
            //ndk {
            //    abiFilters "arm64-v8a"
            //}
            externalNativeBuild {
                cmake {
                    cppFlags " -DVRBROWSER_NO_VR_API"
                    arguments "-DNOAPI=ON"
                }
            }
        }
    }

    flavorDimensions "default"

    sourceSets {
        main {
            java.srcDirs = [
                    'app',
                    'src/common/shared',
                    'src/main/cpp/vrb/android/java'
            ]
        }

        googlevr {
            java.srcDirs = [
                    'src/googlevr/java'
            ]
        }

        googlevrFlat {
            java.srcDirs = [
                    'src/googlevr/java',
                    'src/googlevrFlat/java'
            ]
        }

        oculusvr {
            java.srcDirs = [
                    'src/oculusvr/java'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/ovr_mobile/VrApi/Libs"]
        }

        svr {
            java.srcDirs = [
                    'src/svr/java'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/svr/libs"]
        }

        wavevr {
            java.srcDirs = [
                    'src/wavevr/java'
            ]
            res.srcDirs = [
                    'src/wavevr/res'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/wavesdk/build/wvr_client/jni"]
        }
        noapi {
            java.srcDirs = [
                    'src/noapi/java'
            ]
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    googlevrImplementation 'com.google.vr:sdk-base:1.160.0'
    googlevrFlatImplementation 'com.google.vr:sdk-base:1.160.0'
    svrImplementation fileTree(dir: "${project.rootDir}/third_party/svr/", include: ['*.jar'])
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.google.vr:sdk-audio:1.160.0'
    implementation "org.mozilla.components:telemetry:0.10"
    implementation project(':servoview')
}

if (findProject(':wavesdk')) {
    dependencies {
        wavevrImplementation project(':wavesdk')
    }
}

if (findProject(':geckoview-local')) {
    dependencies {
        implementation project(':geckoview-local')
    }
} else {
    dependencies {
        implementation 'org.mozilla:geckoview-nightly-armeabi-v7a:+'
    }
}


// -------------------------------------------------------------------------------------------------
//  Dynamically set versionCode (See tools/build/versionCode.gradle
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    if (gradle.hasProperty('taskclusterBuild')) {
        def versionCode = generatedVersionCode

        // The Google Play Store does not allow multiple APKs for the same app that all have the
        // same version code. Therefore we need to have different version codes for our ARM and x86
        // builds.
        // Our generated version code has a length of 8 (See tools/gradle/versionCode.gradle).
        // We will prefix our ARM builds with 1 and our x86 builds with 2. Our x86 builds need a
        // higher version code to avoid installing ARM builds on an x86 device with ARM
        // compatibility mode.
        def multiplier = 100000000

        // Currently only support arm7
        //if (variant.flavorName.contains("X86")) {
        //    versionCode = versionCode + (3 * multiplier)
        //} else if (variant.flavorName.contains("Aarch64")) {
        //    versionCode = versionCode + (2 * multiplier)
        //} else if (variant.flavorName.contains("Arm")) {
            versionCode = versionCode + (1 * multiplier)
        //}
        variant.mergedFlavor.versionCode = versionCode
        variant.outputs.all { output ->
            output.setVersionCodeOverride(versionCode)
        }
    }

    println("----------------------------------------------")
    println("Build type:   " + buildType)
    println("Flavor:       " + variant.flavorName)
    println("Version code: " + variant.mergedFlavor.versionCode)
}
